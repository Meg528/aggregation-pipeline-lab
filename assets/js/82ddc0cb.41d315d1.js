"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[14],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=a.createContext({}),l=function(e){var t=a.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(g.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,g=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),u=r,m=c["".concat(g,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var g in t)hasOwnProperty.call(t,g)&&(s[g]=t[g]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(4137));const o={},i="SQL vs Aggregations",s={unversionedId:"what-is-aggregation/sql-vs-aggregation",id:"what-is-aggregation/sql-vs-aggregation",title:"SQL vs Aggregations",description:"SQL",source:"@site/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx",sourceDirName:"20-what-is-aggregation",slug:"/what-is-aggregation/sql-vs-aggregation",permalink:"/aggregation-workshop/docs/what-is-aggregation/sql-vs-aggregation",draft:!1,editUrl:"https://github.com/mongodb-developer/aggregation-workshop/blob/main/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is an Aggregation Pipeline",permalink:"/aggregation-workshop/docs/what-is-aggregation/what-is-aggregation"},next:{title:"Structure of an aggregation pipeline",permalink:"/aggregation-workshop/docs/what-is-aggregation/structure-aggregation"}},g={},l=[{value:"SQL",id:"sql",level:2},{value:"MongoDB Aggregation Pipeline",id:"mongodb-aggregation-pipeline",level:2}],p={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sql-vs-aggregations"},"SQL vs Aggregations"),(0,r.kt)("h2",{id:"sql"},"SQL"),(0,r.kt)("p",null,"A SQL query statement usually starts with a ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," where we put a list of the fields we need, then a ",(0,r.kt)("inlineCode",{parentName:"p"},"FROM")," clause to state the table/s (or as in this case the subquery) that will return the rows. We can filter out using ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," and group data using ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP"),"."),(0,r.kt)("p",null,"We read this from the inside. If there's too much nesting is not easy to follow."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-SQL"},'SELECT\n    city,\n    SUM(annual_spend) Total_Spend,\n    AVG(annual_spend) Average_Spend,\n    MAX(annual_spend) Max_Spend,\n    COUNT(annual_spend) customers\nFROM (\n    SELECT t1.city, customer.annual_spend\n    FROM customer \n    LEFT JOIN (\n        SELECT address.address_id, city.city,\n               address.customer_id, address.location\n        FROM address LEFT JOIN city\n        ON address.city_id = city.city_id\n        ) AS t1\n    ON\n    (customer.customer_id = t1.customer_id AND\n              t1.location = "home")\n) AS t2\nGROUP BY city;\n')),(0,r.kt)("h2",{id:"mongodb-aggregation-pipeline"},"MongoDB Aggregation Pipeline"),(0,r.kt)("p",null,"Here we pass three stages, one to return one document per element in the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," array, then we filter out to get only the documents that have a ",(0,r.kt)("inlineCode",{parentName:"p"},"home")," address location and finally we do the grouping. As we'll see, this can be split and tested separately, and resembles our code. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'db.customers.aggregate([\n    {\n        $unwind: "$address",\n    },\n    {\n        $match: {"address.location": "home"}\n    },\n    {\n         $group: {\n            _id: "$address.city",\n            totalSpend: {$sum: "$annualSpend"},\n            averageSpend: {$avg: "$annualSpend"},\n            maximumSpend: {$max: "$annualSpend"},\n            customers: {$sum: 1}\n        }\n    }\n])\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See also ",(0,r.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/sql-aggregation-comparison/"},"SQL to Aggregation Mapping Chart"))))}d.isMDXComponent=!0}}]);