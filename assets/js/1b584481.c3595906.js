"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[306],{4137:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},g=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(d,a(a({ref:t},g),{},{components:n})):r.createElement(d,a({ref:t},g))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const o={},a="Writing long pipelines",l={unversionedId:"simple-queries/writing-long-pipelines",id:"simple-queries/writing-long-pipelines",title:"Writing long pipelines",description:"Aggregation pipelines can get very long, depending on how many stages we need to run. Writing a pipeline is writing code, as you will write it using one of the many MongoDB drivers in your own language. Here we're presenting the examples using JavaScript suitable for the MongoDB Shell mongosh, but if you are writing a microservice in Rust, you'll definitely write your pipelines in Rust.",source:"@site/docs/30-simple-queries/6-writing-long-pipelines.mdx",sourceDirName:"30-simple-queries",slug:"/simple-queries/writing-long-pipelines",permalink:"/aggregation-workshop/docs/simple-queries/writing-long-pipelines",draft:!1,editUrl:"https://github.com/mongodb-developer/aggregation-workshop/blob/main/docs/30-simple-queries/6-writing-long-pipelines.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Combining stages",permalink:"/aggregation-workshop/docs/simple-queries/combining-them-all"},next:{title:"\ud83e\uddb8\u200d\u2642\ufe0f Repeating stages",permalink:"/aggregation-workshop/docs/simple-queries/repeating-stages"}},s={},p=[],g={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writing-long-pipelines"},"Writing long pipelines"),(0,i.kt)("p",null,"Aggregation pipelines can get very long, depending on how many stages we need to run. Writing a pipeline is writing code, as you will write it using one of the many MongoDB drivers in your own language. Here we're presenting the examples using JavaScript suitable for the MongoDB Shell ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/mongodb-shell/"},"mongosh"),", but if you are writing a microservice in Rust, you'll definitely write your pipelines in Rust."),(0,i.kt)("p",null,"This is why we should rewrite our last pipeline like this:"),(0,i.kt)("p",null,"Get 15 books from 1991 with 150 pages. Show only the ",(0,i.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"year"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"totalInventory")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"available")," books. (Sample doc ",(0,i.kt)("a",{parentName:"p",href:"/docs/simple-queries/project"},"here"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([\n    {$match: {year: 1991, pages: 150}}, {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}}, {$limit: 15}\n])\n")),(0,i.kt)("p",null,"Will be changed into:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let booksFrom1991With150pages = {$match: {year: 1991, pages: 150}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\n\ndb.books.aggregate([\n    booksFrom1991With150pages,\n    showOnlyTheseFields,\n    getJust15books,\n]);\n")),(0,i.kt)("p",null,"Easier to read, and reason about, right?"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Write your aggregation pipelines like you'll compose functions in your programming language. Aggregations ",(0,i.kt)("em",{parentName:"p"},"are")," code that runs on the server. In the client you just express ",(0,i.kt)("em",{parentName:"p"},"what")," you want to be done, not ",(0,i.kt)("em",{parentName:"p"},"how")," to do it.")))}c.isMDXComponent=!0}}]);