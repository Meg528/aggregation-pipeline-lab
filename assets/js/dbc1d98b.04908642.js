"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[355],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(4137));const l={},o="$match",i={unversionedId:"simple-queries/match",id:"simple-queries/match",title:"$match",description:"This is the simplest one, similar to the WHERE SQL clause.",source:"@site/docs/30-simple-queries/2-match.mdx",sourceDirName:"30-simple-queries",slug:"/simple-queries/match",permalink:"/aggregation-pipeline-lab/docs/simple-queries/match",draft:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/30-simple-queries/2-match.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Empty aggregation pipeline",permalink:"/aggregation-pipeline-lab/docs/simple-queries/empty-aggregation"},next:{title:"$project",permalink:"/aggregation-pipeline-lab/docs/simple-queries/project"}},s={},p=[{value:"AND",id:"and",level:2},{value:"Shorthand AND",id:"shorthand-and",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"match"},"$match"),(0,r.kt)("p",null,"This is the simplest one, similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," SQL clause."),(0,r.kt)("p",null,"Say we want all the books from 2010. We'll write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {year: 2010}}])\n")),(0,r.kt)("p",null,"\ud83d\udcbb Return all the ",(0,r.kt)("inlineCode",{parentName:"p"},"books")," that have exactly 100 pages."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Answer"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {pages: 100}}])\n")))),(0,r.kt)("h2",{id:"and"},"AND"),(0,r.kt)("p",null,"If we need to add more conditions using AND, we can do it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"$and")," operator."),(0,r.kt)("p",null,"If we want all the books with 100 pages with exactly ",(0,r.kt)("inlineCode",{parentName:"p"},"totalInventory")," 2 we can use an ",(0,r.kt)("inlineCode",{parentName:"p"},"$and")," operator. This takes and array of documents with all the conditions that should be true for the AND to succeed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {$and: [{pages: 100}, {totalInventory: 2}]}}])\n")),(0,r.kt)("p",null,"The pseudo-code for this would be something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"IF pages == 100 AND totalInventory == 2 {\n    return matching docs\n}\n")),(0,r.kt)("p",null,"\ud83d\udcbb Return all the ",(0,r.kt)("inlineCode",{parentName:"p"},"books")," from 2015 that have exactly 100 pages."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Answer"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {$and: [{pages: 100}, {year: 2015}]}}])\n")))),(0,r.kt)("p",null,"\ud83d\udcbb How many are they? (",(0,r.kt)("em",{parentName:"p"},"hint: use ",(0,r.kt)("inlineCode",{parentName:"em"},"itcount()")),")."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Answer"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {$and: [{pages: 100}, {year: 2015}]}}]).itcount()\n")))),(0,r.kt)("h3",{id:"shorthand-and"},"Shorthand AND"),(0,r.kt)("p",null,"We can do an implicit AND just passing a document with all the conditions (instead of an array of documents):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {pages: 100, totalInventory: 2}}])\n")),(0,r.kt)("p",null,"\ud83d\udcbb Return all the ",(0,r.kt)("inlineCode",{parentName:"p"},"books")," from 2015 that have exactly 100 pages, using the simple $and notation"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Answer"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"db.books.aggregate([{$match: {pages: 100, year: 2015}}])\n")))))}m.isMDXComponent=!0}}]);