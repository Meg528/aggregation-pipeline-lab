"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[762],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=i,f=u["".concat(d,".").concat(g)]||u[g]||c[g]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(4137));const o={},a="Adding new fields to results",s={unversionedId:"modifying-results/adding-fields",id:"modifying-results/adding-fields",title:"Adding new fields to results",description:"$addFields",source:"@site/docs/80-modifying-results/adding-fields.mdx",sourceDirName:"80-modifying-results",slug:"/modifying-results/adding-fields",permalink:"/aggregation-workshop/docs/modifying-results/adding-fields",draft:!1,editUrl:"https://github.com/mongodb-developer/aggregation-workshop/blob/main/docs/80-modifying-results/adding-fields.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Modifying results",permalink:"/aggregation-workshop/docs/category/modifying-results"},next:{title:"Missing Data",permalink:"/aggregation-workshop/docs/modifying-results/missing-data"}},d={},l=[{value:"$addFields",id:"addfields",level:2}],p={toc:l},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-new-fields-to-results"},"Adding new fields to results"),(0,i.kt)("h2",{id:"addfields"},"$addFields"),(0,i.kt)("p",null,"We want to estimate the reading time for a book. But we don't have that field stored in our data. We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"$addFields")," for this. If the field exists, it'll get updated, if not, it's added."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'db.books.aggregate([\n    {$project: {\n        title: 1,\n        pages: 1,\n        }\n    },\n    {$addFields: {readingTimeHours: {$divide: [{$multiply: ["$pages", 2]}, 60]}}},\n])\n')),(0,i.kt)("p",null,"\ud83d\udcbb Add a new field ",(0,i.kt)("inlineCode",{parentName:"p"},"notes")," that contains the text ",(0,i.kt)("inlineCode",{parentName:"p"},"PLACEHOLDER")," for all documents."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Answer"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'db.books.aggregate([\n    {$project: {\n        title: 1,\n        pages: 1,\n        \n    }\n    \n    },\n\n    {$addFields: {notes: "PLACEHOLDER"}}\n])\n')))))}c.isMDXComponent=!0}}]);