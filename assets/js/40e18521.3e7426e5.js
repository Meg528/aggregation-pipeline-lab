"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[610],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,g=p["".concat(c,".").concat(b)]||p[b]||d[b]||i;return n?r.createElement(g,s(s({ref:t},l),{},{components:n})):r.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},4595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(4137));const i={},s="Searching inside Objects in arrays",o={unversionedId:"using-arrays/search-inside-objects-in-arrays",id:"using-arrays/search-inside-objects-in-arrays",title:"Searching inside Objects in arrays",description:"In our books we're using the Attribute Pattern to have different attributes in our documents. As we can see in the sample doc we have an attributes array, containing several objects, each with the same structure:",source:"@site/docs/50-using-arrays/2-search-inside-objects-in-arrays.mdx",sourceDirName:"50-using-arrays",slug:"/using-arrays/search-inside-objects-in-arrays",permalink:"/aggregation-workshop/docs/using-arrays/search-inside-objects-in-arrays",draft:!1,editUrl:"https://github.com/mongodb-developer/aggregation-workshop/blob/main/docs/50-using-arrays/2-search-inside-objects-in-arrays.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple Array queries",permalink:"/aggregation-workshop/docs/using-arrays/simple-match-array"},next:{title:"Lookups / Joins",permalink:"/aggregation-workshop/docs/category/lookups--joins"}},c={},u=[],l={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"searching-inside-objects-in-arrays"},"Searching inside Objects in arrays"),(0,a.kt)("p",null,"In our books we're using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.mongodb.com/developer/products/mongodb/attribute-pattern/"},"Attribute Pattern")," to have different attributes in our documents. As we can see in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/simple-queries/project"},"sample doc")," we have an ",(0,a.kt)("inlineCode",{parentName:"p"},"attributes")," array, containing several objects, each with the same structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"attributes: [\n    {\n      key: 'edition',\n      value: '1st'\n    },\n    {\n      key: 'dimensions',\n      value: 'Height: 1.111 Inches, Length: 1.111 Inches, Weight: 0.2 Pounds, Width: 1.111 Inches'\n    },\n    {\n      key: 'isbn13',\n      value: '9780765342508'\n    },\n    {\n      key: 'msrp',\n      value: 6.99\n    },\n    {\n      key: 'isbn',\n      value: '0765342502'\n    },\n    {\n      key: 'isbn10',\n      value: '0765342502'\n    }\n  ],\n")),(0,a.kt)("p",null,"How do we search for all the books that have an msrp of 9.99? We want books that, inside ",(0,a.kt)("inlineCode",{parentName:"p"},"attributes")," has an object with key ",(0,a.kt)("inlineCode",{parentName:"p"},"msrp")," and value ",(0,a.kt)("inlineCode",{parentName:"p"},"9.99"),". We can think this works:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let nineNinetyNine = {$match: {"attributes.key": "msrp", "attributes.value": 9.99}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1}};\n\ndb.books.aggregate([\n    firstEditions,\n    showOnlyTheseFields,\n]);\n')),(0,a.kt)("p",null,"But it doesn't. This one works:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'db.books.aggregate([\n    { $unwind : "$attributes" },\n    {$match: {"attributes.key": "msrp", "attributes.value": 9.99} },\n   {$project: {title: 1, attributes: 1}}\n]);\n')))}d.isMDXComponent=!0}}]);